version: '3.8'

services:
  # Main Docker Hub MCP Server
  dockerhub-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dockerhub-mcp-server
    environment:
      # Docker Hub Authentication (override in .env file)
      - DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME:-}
      - DOCKERHUB_PASSWORD=${DOCKERHUB_PASSWORD:-}
      - DOCKERHUB_ACCESS_TOKEN=${DOCKERHUB_ACCESS_TOKEN:-}
      
      # Private Registry Support (optional)
      - PRIVATE_REGISTRY_URL=${PRIVATE_REGISTRY_URL:-}
      - PRIVATE_REGISTRY_USERNAME=${PRIVATE_REGISTRY_USERNAME:-}
      - PRIVATE_REGISTRY_PASSWORD=${PRIVATE_REGISTRY_PASSWORD:-}
      
      # Server Configuration
      - MCP_SERVER_NAME=dockerhub-mcp-server
      - MCP_SERVER_VERSION=1.0.0
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
      # Performance Tuning
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-300}
      - MAX_CACHE_SIZE=${MAX_CACHE_SIZE:-1000}
      - DOCKERHUB_RATE_LIMIT=${DOCKERHUB_RATE_LIMIT:-100}
      - DOCKERHUB_RATE_LIMIT_WINDOW=${DOCKERHUB_RATE_LIMIT_WINDOW:-3600}
      
      # Node.js Configuration
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      # Expose for health checks and debugging (optional)
      - "${MCP_PORT:-3001}:3000"
    volumes:
      # Mount for configuration and logs
      - ./logs:/app/logs
      # Mount for custom configuration (optional)
      - ./config:/app/config:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  # Local Docker Registry for testing (optional)
  registry:
    image: registry:2.8
    container_name: test-registry
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      # Enable deletion of images
      - REGISTRY_STORAGE_DELETE_ENABLED=true
      # Basic authentication (optional)
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
    ports:
      - "${REGISTRY_PORT:-5000}:5000"
    volumes:
      - registry-data:/var/lib/registry
      - ./examples/registry-auth:/auth:ro
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - testing

  # Redis for advanced caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - advanced
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./examples/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./examples/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./examples/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Load balancer for multiple instances (optional)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./examples/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - production
    depends_on:
      - dockerhub-mcp-server

volumes:
  registry-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
